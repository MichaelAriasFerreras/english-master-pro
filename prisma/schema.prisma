generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String               @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  currentLevel      String               @default("A1")
  totalXP           Int                  @default(0)
  currentStreak     Int                  @default(0)
  longestStreak     Int                  @default(0)
  lastStudyDate     DateTime?
  dailyGoal         Int                  @default(50)
  reminderTime      String?
  preferredLanguage String               @default("es")
  aiConversations   AIConversation[]
  accounts          Account[]
  formSubmissions   FormSubmission[]
  gameScores        GameScore[]
  sessions          Session[]
  studyStreaks      StudyStreak[]
  userAchievements  UserAchievement[]
  userLessons       UserLessonProgress[]
  userProgress      UserProgress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Word {
  id            String         @id @default(cuid())
  english       String         @unique
  spanish       String
  level         String
  pronunciation String?
  audioUrl      String?
  partOfSpeech  String?
  definition    String?
  examples      Json?
  difficulty    Int            @default(1)
  category      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userProgress  UserProgress[]
}

model Verb {
  id                  String         @id @default(cuid())
  infinitive          String         @unique
  thirdPersonSingular String
  presentParticiple   String
  simplePast          String
  pastParticiple      String
  spanishTranslation  String
  pronunciationIPA    String?
  audioUrl            String?
  level               String
  category            String?
  isIrregular         Boolean        @default(false)
  isModal             Boolean        @default(false)
  isPhrasal           Boolean        @default(false)
  examples            Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  spanishExamples     Json?
  userProgress        UserProgress[]
}

model UserProgress {
  id             String    @id @default(cuid())
  userId         String
  wordId         String?
  verbId         String?
  easeFactor     Float     @default(2.5)
  repetitions    Int       @default(0)
  interval       Int       @default(1)
  nextReviewDate DateTime  @default(now())
  lastReviewDate DateTime?
  correctCount   Int       @default(0)
  incorrectCount Int       @default(0)
  totalReviews   Int       @default(0)
  masteryLevel   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  verb           Verb?     @relation(fields: [verbId], references: [id])
  word           Word?     @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
  @@unique([userId, verbId])
}

model Lesson {
  id            String               @id @default(cuid())
  title         String
  description   String?
  level         String
  orderIndex    Int
  type          String
  content       Json
  objectives    Json?
  estimatedTime Int?
  xpReward      Int                  @default(10)
  isPublished   Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  userLessons   UserLessonProgress[]

  @@unique([level, orderIndex])
}

model UserLessonProgress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  status      String    @default("not_started")
  progress    Float     @default(0)
  score       Int?
  timeSpent   Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Game {
  id           String      @id @default(cuid())
  name         String      @unique
  description  String?
  type         String
  level        String?
  instructions String?
  settings     Json?
  xpReward     Int         @default(5)
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  gameScores   GameScore[]
}

model GameScore {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  score     Int
  maxScore  Int
  timeSpent Int
  accuracy  Float?
  details   Json?
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  icon             String?
  category         String
  condition        Json
  xpReward         Int               @default(0)
  rarity           String            @default("common")
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Float       @default(100)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model StudyStreak {
  id            String    @id @default(cuid())
  userId        String
  startDate     DateTime
  endDate       DateTime?
  currentStreak Int       @default(1)
  maxStreak     Int       @default(1)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIConversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  type      String   @default("general")
  messages  Json
  context   Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FormSubmission {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("pending")
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}
